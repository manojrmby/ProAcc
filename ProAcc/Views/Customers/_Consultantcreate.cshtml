@model ProACC_DB.Consultant
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>



@using (Html.BeginForm("Create","Consultants",FormMethod.Post,new { }))
{
    @Html.AntiForgeryToken()

    <div class="card-body">
        <h4 class="card-title">New Consultant</h4>
        <hr />
        <div class="row">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-6 ">

                <div class="position-relative form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @id = "txtName1", @class = "form-control", @onchange = "ValidateNa()" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        <span id="lblName1" style="color:red"></span>
                    </div>
                </div>

                <div class="position-relative form-group">
                    @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @id = "txtDesc", @class = "form-control", @onchange = "ValidateDesc()" } })
                        @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                        <span id="lblDesc" style="color:red"></span>
                    </div>
                </div>

                <div class="position-relative form-group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @id = "txtMob", @class = "form-control", @onchange = "ValidateNu()" } })
                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                        <span id="lblMob1" style="color:red"></span>
                    </div>
                </div>

            </div>
            <div class="col-6 ">

                <div class="position-relative form-group">
                    @Html.LabelFor(model => model.EMail, "Email", htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EMail, new { htmlAttributes = new { @id = "txtEmail", @class = "form-control", @onchange = "ValidateEmail()" } })
                        @Html.ValidationMessageFor(model => model.EMail, "", new { @class = "text-danger" })
                        <span id="lblEmail" style="color:red"></span>
                    </div>
                </div>

                <div class="position-relative form-group">
                    @Html.LabelFor(model => model.UserName, "User Name", htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @id = "UserName", @class = "form-control", @onchange = "UserCheck()" } })
                        @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                        <p id="Status" />
                    </div>
                </div>

                <div class="position-relative form-group">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @type = "password" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="position-relative form-group">
                    @Html.LabelFor(model => model.UserTypeID, "User Type", htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-11">
                        @Html.DropDownList("UserTypeID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UserTypeID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-offset-2 col-md-12">
                    <input type="submit" value="Create" class="btn btn-secondary" />
                    <div class="col-lg-3" style="float:right;">
                        @Html.ActionLink("Back to List", "Index")
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    function UserCheck() {
        $.post("@Url.Action("CheckUsernameAvailability","Consultants")",
            {
                userdata: $("#UserName").val()
            },
        function (data) {
            if (data == 0) {
                $("#Status").html('');
                //$("#UserName").css("border-color", "gray");
            }
            else {
                $("#Status").html('<font color="Red">UserName is Taken</font>');
                //$("#UserName").css("border-color", "Red");
            }
        });
    }

      function ValidateNa()
      {
          debugger;
          var name1 = document.getElementById("txtName1").value;
          var lblName1 = document.getElementById("lblName");
          lblName1.innerHTML = "";
          var letters = /^[A-Za-z, ]+$/;
          if (!letters.test(name1)) {
            lblName1.innerHTML = "Please enter valid Name";
          }
      }

    function ValidateDesc()
      {
          debugger;
          var Desc = document.getElementById("txtDesc").value;
          var lblDesc = document.getElementById("lblDesc");
          lblDesc.innerHTML = "";
          var letters = /^[A-Za-z, ]+$/;
          if (!letters.test(Desc)) {
            lblDesc.innerHTML = "Please enter valid Name";
          }
      }
    function ValidateEmail() {
        debugger;
        var email = document.getElementById("txtEmail").value;
        var lblEmail = document.getElementById("lblEmail");
        lblEmail.innerHTML = "";
        var expr = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        if (!expr.test(email)) {
            lblEmail.innerHTML = "Please enter valid email address.";
        }
    }

    function ValidateNu() {
         var mob = /^[1-9]{1}[0-9]{9}$/;
        var txtMobile = document.getElementById("txtMob").value;
        var lblMob1 = document.getElementById("lblMob1");
        lblMob1.innerHTML = "";
        if (mob.test(txtMobile) == false) {
            lblMob1.innerHTML = "Please enter valid mobile number.";
        }
    }
</script>

<script type="text/javascript">
    $(function () {
        var msg = '@ViewBag.Message';
        if (msg == 'True')
        {
        alert("Enter the Details");
        }
    });
</script>

